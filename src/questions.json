{
  "titles": [
    {
      "title": "react_v2",
      "questions": [
        {
          "question": "Basic information about hooks:",
          "answers": [
            { "answer": "hooks always start with use." },
            {
              "answer": "almost always hooks are going to be in the top first lines of the component"
            },
            { "answer": "useState is 95% of what you are going to use." }
          ]
        },
        {
          "question": "CODE: standard, one line, one parameter, no parameters, anonymous ARROW FUNCTION",
          "answers": [
            { "answer": "standard: let sum = (a,b) => { return a+b }" },
            {
              "answer": "one line: let sum = (a,b) => a+b"
            },
            {
              "answer": "one parameter: let isPositive = number => number >= 0"
            },
            {
              "answer": "no parameters: let randomNumber = () => Math.random"
            },
            { "answer": "anonymous: () => { console.log('Click') }" }
          ]
        },
        {
          "question": "What are the two ways of assigning onChange to a function?",
          "answers": [
            { "answer": "onChange={(e) => setLocation(e.target.value)}" },
            {
              "answer": "onChange={updateLocation}"
            },
            {
              "answer": "where updateLocation is a function that contains one line: setLocation(e.target.value)"
            }
          ]
        },
        {
          "question": "Can you put hooks inside of for loops and if statements?",
          "answers": [
            {
              "answer": "NO, never do that. You can configure ESLINT to now allow to do that."
            }
          ]
        },
        {
          "question": "What is destructuring?",
          "answers": [
            {
              "answer": "const [location, setLocation] = useState('Seattle, WA')"
            },
            {
              "answer": "It is `[location, setLocation]` so we are destructuring the constant into two constants"
            }
          ]
        },
        {
          "question": "Is index a good thing to have for key property in list?",
          "answers": [
            {
              "answer": "no, if you move index = 0 to index 1 and index 1 to index = 0 the indexes wouldnt  change because the key is constant"
            }
          ]
        },
        {
          "question": "Basics of useState",
          "answers": [
            {
              "answer": "Whatever you put into useState, it is going to return the same type. So if you put a string it returns a string."
            },
            {
              "answer": "if you put a string here, it expects animal to also be a string whenever you call setAnimal"
            },
            { "answer": "const [animal, setAnimal] = useState(””) ;" }
          ]
        },
        {
          "question": "What is useEffect?",
          "answers": [
            {
              "answer": "It allows you to have side effects in your application. "
            },
            {
              "answer": "For these particular search parameters (animal=dog) i want to call API and fetch particular available categories (breeds where animal=dog)."
            }
          ]
        },
        {
          "question": "What is the difference in NODE_ENV= production vs development?",
          "answers": [
            {
              "answer": "The development has a variety of tools for a developer to debug (eg. the key error messages)."
            },
            {
              "answer": "Publishing your product in production makes it 4 times smaller/faster"
            },
            {
              "answer": "how to set it: package.json -> scripts -> 'build' : 'parcel build src/index.html'"
            }
          ]
        },
        {
          "question": "What is StrictMode?",
          "answers": [
            {
              "answer": "It is an additional help(warnings) from the react team"
            },
            {
              "answer": "You use it like that: <StrictMode> <App /> </StrictMode>"
            }
          ]
        },
        {
          "question": "What does react extension in chrome do?",
          "answers": [
            {
              "answer": "Components: you can see the components edit their state see by whom are they rendered"
            },
            {
              "answer": "Profiler: record , do some actions on the site THEN stop recording and see the performance of actions."
            }
          ]
        }
      ]
    },
    {
      "title": "react_v1",
      "questions": [
        {
          "question": "What is Redux?",
          "answers": [
            {
              "answer": "Redux is a state management paradigm based on Facebooks Flux architecture."
            },
            {
              "answer": "Redux provides a structure for a large state trees and allows you to decouple user interaction in your app from state change."
            }
          ]
        },
        {
          "question": "What is GraphQL?",
          "answers": [
            {
              "answer": "Powerful, typed, REST API alternative where client describes the data it needs."
            }
          ]
        },
        {
          "question": "What is Relay?",
          "answers": [
            {
              "answer": "Glue between GraphQL and React. Relay is data-fetching library that makes it easy to write flexible, performant apps without a lot of data-fetching code."
            }
          ]
        },
        {
          "question": "What does JavaScript ES6/ES7 mean?",
          "answers": [
            {
              "answer": "ECMAScript or ES - you can think of a ES6 as a 6th version of javascript."
            }
          ]
        },
        {
          "question": "What does framework do when inputs for a component change?",
          "answers": [
            {
              "answer": "Re-renders that component."
            }
          ]
        },
        {
          "question": "What is JSX?",
          "answers": [
            {
              "answer": "JSX (JavaScript eXtension syntax), a syntax extension for JavaScript written by Facebook."
            },
            {
              "answer": "Using JSX enables us to write the markup for our component views in a familiar, HTML-like syntax."
            },
            {
              "answer": "In the end, this JSX code compiles to vanilla JavaScript."
            }
          ]
        },
        {
          "question": "nativeHTML vs ReactComponent naming",
          "answers": [
            {
              "answer": "In React, native HTML elements always start with a lowercase letter whereas React component names always start with an uppercase letter."
            }
          ]
        },
        {
          "question": "What does braces in id={product.id} mean?",
          "answers": [
            {
              "answer": "In JSX, braces are a delimiter, signaling to JSX that what resides in-between the braces is a JavaScript expression."
            }
          ]
        },
        {
          "question": "Why should you choose let and const instead of var?",
          "answers": [
            {
              "answer": "In addition to the restriction introduced by const, both const and let are block scoped as opposed to function scoped. "
            },
            {
              "answer": "This scoping can help avoid unexpected bugs. "
            }
          ]
        },
        {
          "question": "What is the key property in a list?",
          "answers": [
            {
              "answer": "React uses this special property to create unique bindings for each instance of the Product component.  "
            },
            {
              "answer": "Even if the key prop is not used by our component, the React framework will use it. "
            }
          ]
        },
        {
          "question": "What is one-way data flow?",
          "answers": [
            {
              "answer": "React favors the idea of one-way data flow."
            },
            {
              "answer": "This means that data changes come from the “top” of the app and are propagated “downwards” through its various components. "
            }
          ]
        }
      ]
    },
    {
      "title": "advanced_javascript",
      "questions": [
        {
          "question": "Are functions in javascript = first class objects?",
          "answers": [
            {
              "answer": "Yes they can co-exist and can be treated like any other javascript object."
            },
            {
              "answer": "1. Assigned to variables and properties of other objects"
            },
            {
              "answer": "2. Passed as arguments into functions"
            },
            {
              "answer": "3. Returned as values from functions"
            }
          ]
        },
        {
          "question": "Callback function vs Higher Order Function",
          "answers": [
            {
              "answer": "Callback function is a function that we insert into another function (in arg)"
            },
            {
              "answer": "Higher-order function is the one that we insert the callback function into"
            }
          ]
        },
        {
          "question": "What is Closure?",
          "answers": [
            {
              "answer": "a function with its own memory"
            },
            {
              "answer": "Thanks to that we can for example check how many times the function was called."
            }
          ]
        },
        {
          "question": "How to return a function from another function?",
          "answers": [
            {
              "answer": "for example you have a function1 declared in another function0."
            },
            {
              "answer": "you can just put 'return function1' in function0"
            }
          ]
        },
        {
          "question": "When we call a function outside the function call in which it was defined, do we have access to other things that were inside the function that it was declared in?",
          "answers": [
            {
              "answer": "yes we have when a function returns a function it also returns the local memory that was inside the function, so we have access to the function variables ouside in the global scope"
            }
          ]
        },
        {
          "question": "Where is the surrounding data of function in function stored?",
          "answers": [
            {
              "answer": "in [[scope]] property [[ means it is hidden property"
            }
          ]
        }
      ]
    }
  ]
}
